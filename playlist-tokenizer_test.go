package HLS_test

import (
	"github.com/udan-jayanith/HLS"
	"fmt"
	"io"
	"log"
	"os"
	"testing"
)

func TestPlaylistTokenizer(t *testing.T) {
	file, err := os.Open("./playlist-examples/simple-media-playlist.m3u8")
	if err != nil {
		t.Log("File opening error")
		t.Fatal(err)
	}

	playlistTokenizer := HLS.NewPlayListTokenizer(file)

	{
		token, err := playlistTokenizer.Advance()
		if err != nil {
			t.Log("Unexpected")
			t.Fatal(err)
		}
		testPlaylistTokenizerToken(token, t, HLS.Comment, "Do not edit this file. This file is used to test.")
	}

	{
		token, err := playlistTokenizer.Advance()
		if err != nil {
			t.Log("Unexpected")
			t.Fatal(err)
		}
		testPlaylistTokenizerToken(token, t, HLS.Tag, "EXTM3U")
	}

	{
		token, err := playlistTokenizer.Advance()
		if err != nil {
			t.Log("Unexpected")
			t.Fatal(err)
		}
		testPlaylistTokenizerToken(token, t, HLS.Tag, "EXT-X-TARGETDURATION:10")
	}

	{
		token, err := playlistTokenizer.Advance()
		if err != nil {
			t.Log("Unexpected")
			t.Fatal(err)
		}
		testPlaylistTokenizerToken(token, t, HLS.Tag, "EXT-X-VERSION:3")
	}

	{
		token, err := playlistTokenizer.Advance()
		if err != nil {
			t.Log("Unexpected")
			t.Fatal(err)
		}
		testPlaylistTokenizerToken(token, t, HLS.Tag, "EXTINF:9.009")
	}

	{
		token, err := playlistTokenizer.Advance()
		if err != nil {
			t.Log("Unexpected")
			t.Fatal(err)
		}
		testPlaylistTokenizerToken(token, t, HLS.URI, "http://media.example.com/first.ts")
	}

	{
		token, err := playlistTokenizer.Advance()
		if err != nil {
			t.Log("Unexpected")
			t.Fatal(err)
		}
		testPlaylistTokenizerToken(token, t, HLS.Tag, "EXTINF:9.009")
	}

	{
		token, err := playlistTokenizer.Advance()
		if err != nil {
			t.Log("Unexpected")
			t.Fatal(err)
		}
		testPlaylistTokenizerToken(token, t, HLS.URI, "http://media.example.com/second.ts")
	}

	{
		token, err := playlistTokenizer.Advance()
		if err != nil {
			t.Log("Unexpected")
			t.Fatal(err)
		}
		testPlaylistTokenizerToken(token, t, HLS.Tag, "EXTINF:3.003")
	}

	{
		token, err := playlistTokenizer.Advance()
		if err != nil {
			t.Log("Unexpected")
			t.Fatal(err)
		}
		testPlaylistTokenizerToken(token, t, HLS.RelativeURI, "/third.ts")
	}

	{
		token, err := playlistTokenizer.Advance()
		if err != nil {
			t.Log("Unexpected")
			t.Fatal(err)
		}
		testPlaylistTokenizerToken(token, t, HLS.Tag, "EXT-X-ENDLIST")
	}

	{
		_, err := playlistTokenizer.Advance()
		if err != io.EOF {
			t.Log("Unexpected")
			t.Fatal(err)
		}
	}
}

func testPlaylistTokenizerToken(token HLS.PlaylistToken, t *testing.T, ExpectedLineType HLS.LineType, ExpectedValue string) {
	if token.Type == 4 {
		t.Fatal("Blank line returned by Advance()")
	}

	if token.Type != ExpectedLineType {
		t.Fatal("Expected a", ExpectedLineType.String(), " line but got", token.Type)
	} else if token.Value != ExpectedValue {
		t.Log("Expected")
		t.Log(ExpectedValue)
		t.Log("gut got")
		t.Fatal(token.Value)
	}
}

func ExamplePlayListTokenizer() {
	//Open a hls file.
	file, err := os.Open("./playlist-examples/simple-media-playlist.m3u8")
	if err != nil {
		log.Println(err)
		return
	}

	//PlayListTokenizer needs a reader to tokenize from.
	playlistTokenizer := HLS.NewPlayListTokenizer(file)
	for {
		token, err := playlistTokenizer.Advance()
		if err != nil {
			break
		}

		// Token types are
		// - Tag
		// - URI
		// - RelativeURI
		// - Comment
		// - Blank
		fmt.Println(token.Type)

		// token.Value is the literal value.
		// Examples:
		// EXTINF:3.003
		// \n
		//	#This is a comment
		fmt.Println(token.Value)
	}
}